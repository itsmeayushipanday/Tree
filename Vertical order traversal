/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//tc-o(nlogn), sc-o(n)
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        if(root == NULL) return ans;
        map<int, map<int, multiset<int>>> mp; //col, level, root->val -->multiset to store the unique
        //node values
        queue<pair<TreeNode*, pair<int, int>>> q; //root, col, lvl

        q.push({root, {0, 0}}); // root, col, lvl

        while(!q.empty()){
            auto it = q.front();
            q.pop();

            //it --> root, col, lvl
            TreeNode* node = it.first;
            int col = it.second.first;
            int lvl = it.second.second;

            mp[col][lvl].insert(node->val);

            if(node->left){
                q.push({node->left, {col-1, lvl+1}});
            }
            if(node->right){
                q.push({node->right, {col+1, lvl+1}});
            }
        }
        
        for(auto it:mp){
            vector<int> res;
            //it--:
            //col: {
                //lvl: root->val
            //}
            for(auto p:it.second){
                //p--> lvl: root->val
                res.insert(res.end(), p.second.begin(), p.second.end()); // p.second is root->val
            }
            ans.push_back(res);
        }
        return ans;
    }
};

// col: {
//    level: {root->val}
//}

//{
//    -1: { 
//        1: {9}
//    },
//    0: {
//        0: {3},
//        2: {15}
//    },
//    1: {
//        1: {20}
//    },
//    2: {
//        2: {7}
//    }
//}
