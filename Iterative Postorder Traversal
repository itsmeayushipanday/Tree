/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//tc-o(n)
//sc-o(logn) or worst --> o(3n) -- , 2 stackes and 1 ans vector
vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if(!root) return ans;
        stack<TreeNode*> s1;
        stack<TreeNode*> s2;

        s1.push(root);

        while(!s1.empty()){
            TreeNode* root = s1.top();
            s1.pop();
            s2.push(root);
            //left then right
            //s1 stores right on upper side and left at bottom
            //on processing, it takes right portion nodes first and pushes in s2
            //then left side
            //so s2 has left nodes on top and right at bottom
            //and processing done as usual LRR'
            if(root->left) s1.push(root->left);
            if(root->right) s1.push(root->right);
        }

        while(!s2.empty()){
            TreeNode* root = s2.top();
            s2.pop();
            ans.push_back(root->val);
        }

        return ans;
    }
};
