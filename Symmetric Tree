/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
tc-o(n) sc-recursive stack space
    bool fn(TreeNode* leftRoot, TreeNode* rightRoot){
        if(leftRoot == NULL || rightRoot == NULL) return leftRoot == rightRoot;
        //if both not exist then true
        //if either on of them exists then false
        if(leftRoot->val != rightRoot->val) return false;

        return fn(leftRoot->left, rightRoot->right) && fn(leftRoot->right, rightRoot->left);
        //if at any stage it gets their value equal-->return true without checking further in tree
        
    }
    bool isSymmetric(TreeNode* root) {
        //leave root node
        //start from root->right and root->left
        //apply --> root left right traversal in root->left....goes to left first then right
        //apply --> root right left traversal in root->right....goes to right first then left
        //similar with are two trees identical or not approach
        if(!root) return true;
        return fn(root->left, root->right);
    }
};
